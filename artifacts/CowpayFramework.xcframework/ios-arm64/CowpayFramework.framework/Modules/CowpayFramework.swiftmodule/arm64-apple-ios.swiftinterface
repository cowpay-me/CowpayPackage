// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CowpayFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
@_exported import CowpayFramework
import DeveloperToolsSupport
import Foundation
import QuartzCore
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension CowpayFramework.BottomSheet {
  public func enableTapToDismiss(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
public struct PaymentErrorModel {
  public var failureMessage: Swift.String
}
public enum VisualEffect : Swift.Equatable, Swift.Hashable {
  public enum Material : Swift.Equatable, Swift.Hashable {
    case `default`
    @available(iOS 13.0, *)
    @available(macOS, unavailable)
    case ultraThin
    @available(iOS 13.0, *)
    @available(macOS, unavailable)
    case thin
    @available(iOS 13.0, *)
    @available(macOS, unavailable)
    case thick
    @available(iOS 13.0, *)
    @available(macOS, unavailable)
    case chrome
    @available(macOS 10.15, *)
    @available(iOS, unavailable)
    @available(macCatalyst, unavailable)
    case titlebar
    @available(macOS 10.15, *)
    @available(iOS, unavailable)
    @available(macCatalyst, unavailable)
    case windowBackground
    @available(macOS 10.15, *)
    @available(iOS, unavailable)
    @available(macCatalyst, unavailable)
    case headerView(behindWindow: Swift.Bool)
    @available(macOS 10.15, *)
    @available(iOS, unavailable)
    @available(macCatalyst, unavailable)
    case contentBackground(behindWindow: Swift.Bool)
    @available(macOS 10.15, *)
    @available(iOS, unavailable)
    @available(macCatalyst, unavailable)
    case behindPageBackground(behindWindow: Swift.Bool)
    public static func == (a: CowpayFramework.VisualEffect.Material, b: CowpayFramework.VisualEffect.Material) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case system
  case systemLight
  case systemDark
  case adaptive(CowpayFramework.VisualEffect.Material)
  case light(CowpayFramework.VisualEffect.Material)
  case dark(CowpayFramework.VisualEffect.Material)
  public static func == (a: CowpayFramework.VisualEffect, b: CowpayFramework.VisualEffect) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CowpayFramework.BottomSheet {
  public func onDismiss(_ perform: @escaping () -> Swift.Void) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
public struct CreditCardSuccessModel : CowpayFramework.PaymentSuccessModel {
  public var paymentMethodName: Swift.String
  public var paymentReferenceId: Swift.String
}
extension CowpayFramework.BottomSheet {
  public func customBackground<Background>(_ background: Background, alignment: SwiftUI.Alignment = .center) -> CowpayFramework.BottomSheet<HContent, MContent, V> where Background : SwiftUI.View
  public func customBackground<V>(alignment: SwiftUI.Alignment = .center, @SwiftUI.ViewBuilder content: () -> V) -> CowpayFramework.BottomSheet<HContent, MContent, V> where V : SwiftUI.View
  public func customBackground<S>(_ style: S, ignoresSafeAreaEdges edges: SwiftUI.Edge.Set = .all) -> CowpayFramework.BottomSheet<HContent, MContent, V> where S : SwiftUI.ShapeStyle
  public func customBackground<S, T>(_ style: S, in shape: T, fillStyle: SwiftUI.FillStyle = FillStyle()) -> CowpayFramework.BottomSheet<HContent, MContent, V> where S : SwiftUI.ShapeStyle, T : SwiftUI.Shape
  public func customBackground<S, T>(_ style: S, in shape: T, fillStyle: SwiftUI.FillStyle = FillStyle()) -> CowpayFramework.BottomSheet<HContent, MContent, V> where S : SwiftUI.ShapeStyle, T : SwiftUI.InsettableShape
}
public struct FawrySuccessModel : CowpayFramework.PaymentSuccessModel {
  public var paymentMethodName: Swift.String
  public var paymentGatewayReferenceId: Swift.String
  public var cowpayReferenceId: Swift.String
  public var merchantReferenceId: Swift.String
}
@_hasMissingDesignatedInitializers public class Veil {
  public struct Config {
    public init(digitChar: Swift.Character, anyChar: Swift.Character, letterChar: Swift.Character = "A")
    public static func defaultConf() -> CowpayFramework.Veil.Config
  }
  convenience public init(pattern string: Swift.String, config: CowpayFramework.Veil.Config = .defaultConf())
  public func mask(input: Swift.String, exhaustive: Swift.Bool = true) -> Swift.String
  public func process(input: Swift.String, exhaustive: Swift.Bool = true) -> (masked: Swift.String, unmasked: Swift.String)
  @objc deinit
}
extension CowpayFramework.BottomSheet {
  public func enableContentDrag(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
public protocol PaymentSuccessModel {
  var paymentMethodName: Swift.String { get set }
}
public enum BottomSheetPosition : Swift.Equatable {
  case hidden
  case dynamicBottom
  case dynamic
  case dynamicTop
  case relativeBottom(CoreFoundation.CGFloat)
  case relative(CoreFoundation.CGFloat)
  case relativeTop(CoreFoundation.CGFloat)
  case absoluteBottom(CoreFoundation.CGFloat)
  case absolute(CoreFoundation.CGFloat)
  case absoluteTop(CoreFoundation.CGFloat)
  public static func == (a: CowpayFramework.BottomSheetPosition, b: CowpayFramework.BottomSheetPosition) -> Swift.Bool
}
extension CowpayFramework.BottomSheet {
  public func showDragIndicator(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
  public func dragIndicatorColor(_ color: SwiftUI.Color) -> CowpayFramework.BottomSheet<HContent, MContent, V>
  public func dragIndicatorAction(_ action: @escaping (SwiftUI.GeometryProxy) -> Swift.Void) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
public enum BottomSheetWidth : Swift.Equatable {
  case platformDefault
  case relative(CoreFoundation.CGFloat)
  case absolute(CoreFoundation.CGFloat)
  public static func == (a: CowpayFramework.BottomSheetWidth, b: CowpayFramework.BottomSheetWidth) -> Swift.Bool
}
extension CowpayFramework.BottomSheet {
  public func enableAccountingForKeyboardHeight(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
extension CowpayFramework.BottomSheet {
  public func customThreshold(_ threshold: Swift.Double) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
extension CowpayFramework.BottomSheet {
  public func customAnimation(_ animation: SwiftUI.Animation?) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
open class CountrySource {
  public init()
  @objc deinit
}
extension CowpayFramework.CountrySource {
  public func currentCountry(completion: ((Swift.Result<CowpayFramework.Country, any Swift.Error>) -> Swift.Void)?)
  public func allCountries(completion: ((Swift.Result<[CowpayFramework.Country], any Swift.Error>) -> Swift.Void)?)
}
public enum CountrySourceError : Swift.Int, Swift.Error {
  case notFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension CowpayFramework.CountrySourceError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Country : Swift.Codable, Swift.Equatable {
  public var name: Swift.String
  public var dialCode: Swift.String
  public var code: Swift.String
  public static func == (a: CowpayFramework.Country, b: CowpayFramework.Country) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CowpayFramework.BottomSheet {
  public func enableAppleScrollBehavior(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
@available(iOS 15, macOS 12, *)
extension CowpayFramework.BottomSheet {
  public func customBackground(ignoresSafeAreaEdges edges: SwiftUI.Edge.Set = .all) -> CowpayFramework.BottomSheet<HContent, MContent, V>
  public func customBackground<S>(in shape: S, fillStyle: SwiftUI.FillStyle = FillStyle()) -> CowpayFramework.BottomSheet<HContent, MContent, V> where S : SwiftUI.Shape
  public func customBackground<S>(in shape: S, fillStyle: SwiftUI.FillStyle = FillStyle()) -> CowpayFramework.BottomSheet<HContent, MContent, V> where S : SwiftUI.InsettableShape
}
public struct CowpayInitModel {
  public init(merchantCode: Swift.String, merchantHashCode: Swift.String, merchantMobile: Swift.String, logoStringUrl: Swift.String? = nil, cowpayEnvironment: CowpayFramework.CowpayEnviroment, localizationCode: CowpayFramework.LocalizationEnum = .en, cowpayCallback: any CowpayFramework.CowpayCallBack, paymentInfo: CowpayFramework.PaymentInfo) throws
}
@_Concurrency.MainActor(unsafe) public struct CowpayFrameWork : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public static func initCowpaySwiftUIView(cowpayInitModel: CowpayFramework.CowpayInitModel) -> some SwiftUI.View
  
  @_Concurrency.MainActor(unsafe) public static func initCowpayViewController(cowpayInitModel: CowpayFramework.CowpayInitModel) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15CowpayFramework0A9FrameWorkV4bodyQrvp", 0) __
}
extension CowpayFramework.BottomSheet {
  public func showCloseButton(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
extension CowpayFramework.BottomSheet {
  public func onDragChanged(_ perform: @escaping (SwiftUI.DragGesture.Value) -> Swift.Void) -> CowpayFramework.BottomSheet<HContent, MContent, V>
  public func onDragEnded(_ perform: @escaping (SwiftUI.DragGesture.Value) -> Swift.Void) -> CowpayFramework.BottomSheet<HContent, MContent, V>
  public func dragPositionSwitchAction(_ action: @escaping (SwiftUI.GeometryProxy, SwiftUI.DragGesture.Value) -> Swift.Void) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
public struct BottomSheet<HContent, MContent, V> : SwiftUI.View where HContent : SwiftUI.View, MContent : SwiftUI.View, V : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15CowpayFramework11BottomSheetV4bodyQrvp", 0) __<HContent, MContent, V>
}
extension SwiftUI.View {
  public func bottomSheet<HContent, MContent>(bottomSheetPosition: SwiftUI.Binding<CowpayFramework.BottomSheetPosition>, switchablePositions: [CowpayFramework.BottomSheetPosition], @SwiftUI.ViewBuilder headerContent: () -> HContent? = {
            return nil
        }, @SwiftUI.ViewBuilder mainContent: () -> MContent) -> CowpayFramework.BottomSheet<HContent, MContent, Self> where HContent : SwiftUI.View, MContent : SwiftUI.View
  public typealias TitleContent = SwiftUI.ModifiedContent<SwiftUI.Text, SwiftUI._EnvironmentKeyWritingModifier<Swift.Int?>>
  public func bottomSheet<MContent>(bottomSheetPosition: SwiftUI.Binding<CowpayFramework.BottomSheetPosition>, switchablePositions: [CowpayFramework.BottomSheetPosition], title: Swift.String? = nil, @SwiftUI.ViewBuilder content: () -> MContent) -> CowpayFramework.BottomSheet<Self.TitleContent, MContent, Self> where MContent : SwiftUI.View
}
extension CowpayFramework.BottomSheet {
  public func isResizable(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
extension CowpayFramework.BottomSheet {
  public func enableFlickThrough(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
extension CowpayFramework.BottomSheet {
  public func enableFloatingIPadSheet(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
public enum LocalizationEnum {
  case ar
  case en
  public static func == (a: CowpayFramework.LocalizationEnum, b: CowpayFramework.LocalizationEnum) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CowpayCallBack {
  func onSuccess(model: any CowpayFramework.PaymentSuccessModel)
  func onError(model: CowpayFramework.PaymentErrorModel)
  func onClosedByUser()
}
extension CowpayFramework.BottomSheet {
  public func enableSwipeToDismiss(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
extension CowpayFramework.BottomSheet {
  public func sheetWidth(_ width: CowpayFramework.BottomSheetWidth = .platformDefault) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
extension CowpayFramework.BottomSheet {
  public func enableBackgroundBlur(_ bool: Swift.Bool = true) -> CowpayFramework.BottomSheet<HContent, MContent, V>
  public func backgroundBlurMaterial(_ material: CowpayFramework.VisualEffect) -> CowpayFramework.BottomSheet<HContent, MContent, V>
}
public enum CowpayEnviroment {
  case production
  case staging
  public static func == (a: CowpayFramework.CowpayEnviroment, b: CowpayFramework.CowpayEnviroment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PaymentInfo {
  public init(description: Swift.String, merchantReferenceId: Swift.String, amount: Swift.Double, customerEmail: Swift.String, customerFirstName: Swift.String, customerLastName: Swift.String, customerMobile: Swift.String, customerMerchantProfileId: Swift.String, isFeesOnCustomer: Swift.Bool = false) throws
}
extension CowpayFramework.CountrySourceError : Swift.Equatable {}
extension CowpayFramework.CountrySourceError : Swift.Hashable {}
extension CowpayFramework.CountrySourceError : Swift.RawRepresentable {}
extension CowpayFramework.LocalizationEnum : Swift.Equatable {}
extension CowpayFramework.LocalizationEnum : Swift.Hashable {}
extension CowpayFramework.CowpayEnviroment : Swift.Equatable {}
extension CowpayFramework.CowpayEnviroment : Swift.Hashable {}
